{
  "_args": [
    [
      {
        "raw": "eventsource@^0.2.1",
        "scope": null,
        "escapedName": "eventsource",
        "name": "eventsource",
        "rawSpec": "^0.2.1",
        "spec": ">=0.2.1 <0.3.0",
        "type": "range"
      },
      "/home/alan/devel/out/banks/stellar/create_account/node_modules/stellar-sdk"
    ]
  ],
  "_from": "eventsource@>=0.2.1 <0.3.0",
  "_id": "eventsource@0.2.3",
  "_inCache": true,
  "_location": "/eventsource",
  "_nodeVersion": "7.6.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/eventsource-0.2.3.tgz_1492430130836_0.005509671987965703"
  },
  "_npmUser": {
    "name": "rexxars",
    "email": "rexxars@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "eventsource@^0.2.1",
    "scope": null,
    "escapedName": "eventsource",
    "name": "eventsource",
    "rawSpec": "^0.2.1",
    "spec": ">=0.2.1 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/stellar-sdk"
  ],
  "_resolved": "https://registry.npmjs.org/eventsource/-/eventsource-0.2.3.tgz",
  "_shasum": "30b8f21b40d86968eaeebd199a95072ee54b0df3",
  "_shrinkwrap": null,
  "_spec": "eventsource@^0.2.1",
  "_where": "/home/alan/devel/out/banks/stellar/create_account/node_modules/stellar-sdk",
  "author": {
    "name": "Aslak HellesÃ¸y",
    "email": "aslak.hellesoy@gmail.com"
  },
  "bugs": {
    "url": "http://github.com/EventSource/eventsource/issues"
  },
  "dependencies": {
    "original": "^1.0.0"
  },
  "description": "W3C compliant EventSource client for Node.js and browser (polyfill)",
  "devDependencies": {
    "express": "^4.13.4",
    "mocha": "^3.2.0",
    "serve-static": "^1.10.2",
    "sse": "^0.0.6",
    "webpack": "^2.4.1"
  },
  "directories": {
    "lib": "./lib"
  },
  "dist": {
    "shasum": "30b8f21b40d86968eaeebd199a95072ee54b0df3",
    "tarball": "https://registry.npmjs.org/eventsource/-/eventsource-0.2.3.tgz"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "gitHead": "d763f3a2421f62f4e125d64e62f7a87eac155bca",
  "homepage": "http://github.com/EventSource/eventsource",
  "keywords": [
    "eventsource",
    "http",
    "streaming",
    "sse",
    "polyfill"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/EventSource/eventsource/raw/master/LICENSE"
    }
  ],
  "main": "./lib/eventsource",
  "maintainers": [
    {
      "name": "aslakhellesoy",
      "email": "aslak.hellesoy@gmail.com"
    },
    {
      "name": "rexxars",
      "email": "rexxars@gmail.com"
    }
  ],
  "name": "eventsource",
  "optionalDependencies": {},
  "readme": "# EventSource [![Build Status](https://secure.travis-ci.org/EventSource/eventsource.svg)](http://travis-ci.org/EventSource/eventsource) [![NPM Downloads](https://img.shields.io/npm/dm/eventsource.svg?style=flat-square)](http://npm-stat.com/charts.html?package=eventsource&from=2015-09-01) [![Dependencies](https://david-dm.org/EventSource/eventsource.svg)](https://david-dm.org/EventSource/eventsource)\n\nThis library is a pure JavaScript implementation of the [EventSource](http://www.w3.org/TR/eventsource/) client. The API aims to be W3C compatible.\n\nYou can use it with Node.js or as a browser polyfill for\n[browsers that don't have native `EventSource` support](http://caniuse.com/#search=eventsource).\n\n## Install\n\n    npm install eventsource\n\n## Example\n\n    npm install\n    node ./example/sse-server.js\n    node ./example/sse-client.js    # Node.js client\n    open http://localhost:8080      # Browser client - both native and polyfill\n    curl http://localhost:8080/sse  # Enjoy the simplicity of SSE)\n\n## Browser Polyfill\n\nJust add `example/eventsource-polyfill.js` file to your web page:\n\n```html\n<script src=/eventsource-polyfill.js></script>\n```\n\nNow you will have two global constructors:\n\n```javascript\nwindow.EventSourcePolyfill\nwindow.EventSource // Unchanged if browser has defined it. Otherwise, same as window.EventSourcePolyfill\n```\n\nIf you're using [webpack](https://webpack.github.io/) or [browserify](http://browserify.org/)\nyou can of course build your own. (The `example/eventsource-polyfill.js` is built with webpack).\n\n## Extensions to the W3C API\n\n### Setting HTTP request headers\n\nYou can define custom HTTP headers for the initial HTTP request. This can be useful for e.g. sending cookies\nor to specify an initial `Last-Event-ID` value.\n\nHTTP headers are defined by assigning a `headers` attribute to the optional `eventSourceInitDict` argument:\n\n```javascript\nvar eventSourceInitDict = {headers: {'Cookie': 'test=test'}};\nvar es = new EventSource(url, eventSourceInitDict);\n```\n\n### Allow unauthorized HTTPS requests\n\nBy default, https requests that cannot be authorized will cause connection to fail and an exception\nto be emitted. You can override this behaviour:\n\n```javascript\nvar eventSourceInitDict = {rejectUnauthorized: false};\nvar es = new EventSource(url, eventSourceInitDict);\n```\n\nNote that for Node.js < v0.10.x this option has no effect - unauthorized HTTPS requests are *always* allowed.\n\n### HTTP status code on error events\n\nUnauthorized and redirect error status codes (for example 401, 403, 301, 307) are available in the `status` property in the error event.\n\n```javascript\nes.onerror = function (err) {\n  if (err) {\n    if (err.status === 401 || err.status === 403) {\n      console.log('not authorized');\n    }\n  }\n};\n```\n\n### HTTP/HTTPS proxy\n\nYou can define a `proxy` option for the HTTP request to be used. This is typically useful if you are behind a corporate firewall.\n\n```javascript\nvar es = new EventSource(url, { proxy: 'http://your.proxy.com' });\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/EventSource/eventsource.git"
  },
  "scripts": {
    "polyfill": "webpack lib/eventsource-polyfill.js example/eventsource-polyfill.js",
    "postpublish": "git push && git push --tags",
    "test": "mocha --reporter spec"
  },
  "version": "0.2.3"
}
